@using AzPC.Blazor.App.Layout
@using AzPC.Blazor.App.Shared
@inherits BaseLayout
@layout AuthRequiredLayout

<Sidebar />

<div class="wrapper d-flex flex-column min-vh-100">
    <header class="header header-sticky p-0 mb-4">
        <div class="container-fluid border-bottom px-4">
            <button class="header-toggler" type="button" onclick="coreui.Sidebar.getInstance(document.querySelector('#sidebar')).toggle()" style="margin-inline-start: -14px;">
                <CIcon icon="cil-menu" className="icon icon-lg" />
            </button>
            <ul class="header-nav d-none d-lg-flex">
                <li class="nav-item"><a class="nav-link" href="@UIGlobals.ROUTE_HOME">Dashboard</a></li>
                <li class="nav-item"><a class="nav-link" href="@UIGlobals.ROUTE_IDENTITY_USERS">Users</a></li>
                <li class="nav-item"><a class="nav-link" href="@UIGlobals.ROUTE_IDENTITY_ROLES">Roles</a></li>
                <li class="nav-item"><a class="nav-link" href="@UIGlobals.ROUTE_APPLICATIONS">Applications</a></li>
            </ul>
            <ul class="header-nav ms-auto">
                <li class="nav-item">
                    <a class="nav-link" href="#">
                        <CIcon icon="cil-bell" className="icon icon-lg" />
                    </a>
                </li>
                <li class="nav-item">
                    <a class="nav-link" href="#">
                        <CIcon icon="cil-list-rich" className="icon icon-lg" />
                    </a>
                </li>
                <li class="nav-item">
                    <a class="nav-link" href="#">
                        <CIcon icon="cil-envelope-open" className="icon icon-lg" />
                    </a>
                </li>
            </ul>
            <ul class="header-nav">
                <li class="nav-item py-1">
                    <div class="vr h-100 mx-2 text-body text-opacity-75"></div>
                </li>
                <li class="nav-item dropdown">
                    <button class="btn btn-link nav-link py-2 px-2 d-flex align-items-center" type="button" aria-expanded="false" data-coreui-toggle="dropdown">
                        <CIcon icon="cil-contrast" className="icon icon-lg theme-icon-active" />
                    </button>
                    <ul class="dropdown-menu dropdown-menu-end" style="--cui-dropdown-min-width: 8rem;">
                        <li>
                            <button class="dropdown-item d-flex align-items-center" type="button" data-coreui-theme-value="light">
                                <CIcon icon="cil-sun" className="icon icon-lg me-3" />Light
                            </button>
                        </li>
                        <li>
                            <button class="dropdown-item d-flex align-items-center" type="button" data-coreui-theme-value="dark">
                                <CIcon icon="cil-moon" className="icon icon-lg me-3" />Dark
                            </button>
                        </li>
                        <li>
                            <button class="dropdown-item d-flex align-items-center active" type="button" data-coreui-theme-value="auto">
                                <CIcon icon="cil-contrast" className="icon icon-lg me-3" />Auto
                            </button>
                        </li>
                    </ul>
                </li>
                <li class="nav-item py-1">
                    <div class="vr h-100 mx-2 text-body text-opacity-75"></div>
                </li>
                <li class="nav-item dropdown">
                    <a class="nav-link py-0 pe-0" data-coreui-toggle="dropdown" href="#" role="button" aria-haspopup="true" aria-expanded="false">
                        <div class="avatar avatar-md"><img class="avatar-img" src="@GravatarUrl" alt="user@email.com"></div>
                    </a>
                    <div class="dropdown-menu dropdown-menu-end pt-0">
                        <div class="dropdown-header bg-body-tertiary text-body-secondary fw-semibold rounded-top mb-2">Account</div>
						<!--
                        <a class="dropdown-item" href="#">
                            <CIcon icon="cil-bell" className="icon me-2" /> Updates<span class="badge badge-sm bg-info ms-2">42</span>
                        </a>
                        <a class="dropdown-item" href="#">
                            <CIcon icon="cil-envelope-open" className="icon me-2" /> Messages<span class="badge badge-sm bg-success ms-2">42</span>
                        </a>
    using System.Security.Cryptography;
    using System.Security.Cryptography;
    using System.Security.Cryptography;
    using System.Security.Cryptography;
                        <a class="dropdown-item" href="#">
                            <CIcon icon="cil-task" className="icon me-2" /> Tasks<span class="badge badge-sm bg-danger ms-2">42</span>
                        </a>
                        <a class="dropdown-item" href="#">
                            <CIcon icon="cil-comment-square" className="icon me-2" /> Comments<span class="badge badge-sm bg-warning ms-2">42</span>
                        </a>
                        <div class="dropdown-header bg-body-tertiary text-body-secondary fw-semibold my-2">
                            <div class="fw-semibold">Settings</div>
                        </div>
						-->
                        <a class="dropdown-item" href="@UIGlobals.ROUTE_PROFILE">
                            <CIcon icon="cil-user" className="icon me-2" /> Profile
                        </a>
						<!--
                        <a class="dropdown-item" href="#">
                            <CIcon icon="cil-settings" className="icon me-2" /> Settings
                        </a>
						-->
                        <!--
                        <a class="dropdown-item" href="#">
                            <CIcon icon="cil-credit-card" className="icon me-2" /> Payments<span class="badge badge-sm bg-secondary ms-2">42</span>
                        </a>
                        -->
                        <!--
                        <a class="dropdown-item" href="#">
                            <CIcon icon="cil-file" className="icon me-2" /> Projects<span class="badge badge-sm bg-primary ms-2">42</span>
                        </a>
                        -->
                        <div class="dropdown-divider"></div>
                        <!--
                        <a class="dropdown-item" href="#">
                            <CIcon icon="cil-lock-locked" className="icon me-2" /> Lock Account
                        </a>
                        -->
                        <a class="dropdown-item" href="@UIGlobals.ROUTE_LOGOUT">
                            <CIcon icon="cil-account-logout" className="icon me-2" /> Logout
                        </a>
                    </div>
                </li>
            </ul>
        </div>
        <div class="container-fluid px-4">
            <nav aria-label="breadcrumb">
                <ol class="breadcrumb my-0">
                    <SectionOutlet SectionId="Breadcrumb" />
                </ol>
            </nav>
        </div>
    </header>

    <div class="body flex-grow-1">
        @Body
    </div>
    <footer class="footer px-4">
        <div>@AppInfo?.Name v@(AppInfo?.Version)</div>
        <div class="ms-auto">
            Powered by <a href="https://github.com/DDTH/blazor-admin-template/">Blazor Admin Template</a>.
            Templated by CoreUI <a href="https://coreui.io/product/free-bootstrap-admin-template/" target="_blank">Bootstrap Admin Template</a>.
        </div>
    </footer>
</div>

<!-- CoreUI and necessary plugins-->
<script src="@UIGlobals.COREUI_BASE/js/config.js" defer></script>
<script src="@UIGlobals.COREUI_BASE/js/color-modes.js" defer></script>

<script src="@UIGlobals.COREUI_BASE/vendors/@@coreui/coreui/js/coreui.bundle.min.js" defer></script>
<script src="@UIGlobals.COREUI_BASE/vendors/simplebar/js/simplebar.min.js" defer></script>
<script>
    const header = document.querySelector('header.header');
    document.addEventListener('scroll', () => {
        if (header) {
            header.classList.toggle('shadow-sm', document.documentElement.scrollTop > 0);
        }
    });
</script>
<script src="@UIGlobals.COREUI_BASE/vendors/@@coreui/utils/js/index.js" defer></script>
<script>
    // FIX the bug where coreui is not properly initialized with Blazor.
    function CoreUIFix() {
        if (typeof (coreui) === 'undefined' || typeof (coreui.Sidebar) === 'undefined') {
            setTimeout(CoreUIFix, 10);
            return;
        }
        CoreUIFixSidebar();
        CoreUIFixThemeSwitcher();
    }

    function CoreUIFixSidebar() {
        // fix the sidar toggler
        let element = document.querySelector('#sidebar');
        if (!coreui.Sidebar.getInstance(element)) {
            console.log('[DEBUG] calling coreui.Sidebar.getOrCreateInstance(element)...')
            coreui.Sidebar.getOrCreateInstance(element);
        }
    }

    function CoreUIFixThemeSwitcher() {
        // fix the theme switcher
        const THEME = 'coreui-free-bootstrap-admin-template-theme';
        const getStoredTheme = () => localStorage.getItem(THEME);
        const setStoredTheme = theme => localStorage.setItem(THEME, theme);
        const getPreferredTheme = () => {
            const storedTheme = getStoredTheme();
            if (storedTheme) {
                return storedTheme;
            }
            return window.matchMedia('(prefers-color-scheme: dark)').matches ? 'dark' : 'light';
        };
        const setTheme = theme => {
            if (theme === 'auto' && window.matchMedia('(prefers-color-scheme: dark)').matches) {
                document.documentElement.setAttribute('data-coreui-theme', 'dark');
            } else {
                document.documentElement.setAttribute('data-coreui-theme', theme);
            }
            const event = new Event('ColorSchemeChange');
            document.documentElement.dispatchEvent(event);
        };
        setTheme(getPreferredTheme());
        const showActiveTheme = theme => {
            const activeThemeIcon = document.querySelector('.theme-icon-active use');
            const btnToActive = document.querySelector(`[data-coreui-theme-value="${theme}"]`);
            const svgOfActiveBtn = btnToActive.querySelector('svg use').getAttribute('xlink:href');
            for (const element of document.querySelectorAll('[data-coreui-theme-value]')) {
                element.classList.remove('active');
            }
            btnToActive.classList.add('active');
            activeThemeIcon.setAttribute('xlink:href', svgOfActiveBtn);
        };
        window.matchMedia('(prefers-color-scheme: dark)').addEventListener('change', () => {
            const storedTheme = getStoredTheme();
            if (storedTheme !== 'light' || storedTheme !== 'dark') {
                setTheme(getPreferredTheme());
            }
        });
        showActiveTheme(getPreferredTheme());
        for (const toggle of document.querySelectorAll('[data-coreui-theme-value]')) {
            toggle.addEventListener('click', () => {
                const theme = toggle.getAttribute('data-coreui-theme-value');
                setStoredTheme(theme);
                setTheme(theme);
                showActiveTheme(theme);
            });
        }
    }

    CoreUIFix();
</script>

@code {
    internal static readonly object Breadcrumb = new();

	private string GravatarUrl { get; set; } = string.Empty;

	protected override async Task OnInitializedAsync()
	{
		await base.OnInitializedAsync();
		var respUser = await ApiClient.GetMyInfoAsync(await GetAuthTokenAsync(), ApiBaseUrl);
		var email = respUser?.Data.Email.Trim().ToLower() ?? string.Empty;
		var inputBytes = System.Text.Encoding.UTF8.GetBytes(email);
        GravatarUrl = $"https://www.gravatar.com/avatar/{MD5.ComputeHashString(inputBytes).ToLower()}?s=64&d=identicon";

    }

	// ref: https://stackoverflow.com/a/76734976
	// Since MD5 is not available in Blazor WASM, we implement it ourselves.
	public static class MD5
	{
		public static byte[] ComputeHash(byte[] input)
		{
			uint num = 1732584193u;
			uint num2 = 4023233417u;
			uint num3 = 2562383102u;
			uint num4 = 271733878u;
			int num5 = (56 - (input.Length + 1) % 64) % 64;
			byte[] array = new byte[input.Length + 1 + num5 + 8];
			Array.Copy(input, array, input.Length);
			array[input.Length] = 128;
			Array.Copy(BitConverter.GetBytes(input.Length * 8), 0, array, array.Length - 8, 4);
			for (int i = 0; i < array.Length / 64; i++)
			{
				uint[] array2 = new uint[16];
				for (int j = 0; j < 16; j++)
				{
					array2[j] = BitConverter.ToUInt32(array, i * 64 + j * 4);
				}

				uint num6 = num;
				uint num7 = num2;
				uint num8 = num3;
				uint num9 = num4;
				uint num10 = 0u;
				uint num11 = 0u;
				uint num12 = 0u;
				while (true)
				{
					switch (num12)
					{
						case 0u:
						case 1u:
						case 2u:
						case 3u:
						case 4u:
						case 5u:
						case 6u:
						case 7u:
						case 8u:
						case 9u:
						case 10u:
						case 11u:
						case 12u:
						case 13u:
						case 14u:
						case 15u:
							num10 = num7 & num8 | ~num7 & num9;
							num11 = num12;
							goto IL_0138;
						case 16u:
						case 17u:
						case 18u:
						case 19u:
						case 20u:
						case 21u:
						case 22u:
						case 23u:
						case 24u:
						case 25u:
						case 26u:
						case 27u:
						case 28u:
						case 29u:
						case 30u:
						case 31u:
						case 32u:
						case 33u:
						case 34u:
						case 35u:
						case 36u:
						case 37u:
						case 38u:
						case 39u:
						case 40u:
						case 41u:
						case 42u:
						case 43u:
						case 44u:
						case 45u:
						case 46u:
						case 47u:
						case 48u:
						case 49u:
						case 50u:
						case 51u:
						case 52u:
						case 53u:
						case 54u:
						case 55u:
						case 56u:
						case 57u:
						case 58u:
						case 59u:
						case 60u:
						case 61u:
						case 62u:
						case 63u:
							if (num12 >= 16 && num12 <= 31)
							{
								num10 = num9 & num7 | ~num9 & num8;
								num11 = (5 * num12 + 1) % 16u;
							}
							else if (num12 >= 32 && num12 <= 47)
							{
								num10 = num7 ^ num8 ^ num9;
								num11 = (3 * num12 + 5) % 16u;
							}
							else if (num12 >= 48)
							{
								num10 = num8 ^ (num7 | ~num9);
								num11 = 7 * num12 % 16u;
							}

							goto IL_0138;
					}

					break;
				IL_0138:
					uint num13 = num9;
					num9 = num8;
					num8 = num7;
					num7 += leftRotate(num6 + num10 + K[num12] + array2[num11], s[num12]);
					num6 = num13;
					num12++;
				}

				num += num6;
				num2 += num7;
				num3 += num8;
				num4 += num9;
			}
			var hashBytes = new byte[16];
			BitConverter.GetBytes(num).CopyTo(hashBytes, 0);
			BitConverter.GetBytes(num2).CopyTo(hashBytes, 4);
			BitConverter.GetBytes(num3).CopyTo(hashBytes, 8);
			BitConverter.GetBytes(num4).CopyTo(hashBytes, 12);
			return hashBytes;
		}
		public static string ComputeHashString(byte[] input) => string.Join("", ComputeHash(input).Select(o => o.ToString("x2")));

		private static readonly int[] s = new int[64]
		{
			7, 12, 17, 22, 7, 12, 17, 22, 7, 12,
			17, 22, 7, 12, 17, 22, 5, 9, 14, 20,
			5, 9, 14, 20, 5, 9, 14, 20, 5, 9,
			14, 20, 4, 11, 16, 23, 4, 11, 16, 23,
			4, 11, 16, 23, 4, 11, 16, 23, 6, 10,
			15, 21, 6, 10, 15, 21, 6, 10, 15, 21,
			6, 10, 15, 21
		};

		private static readonly uint[] K = new uint[64]
		{
			3614090360u, 3905402710u, 606105819u, 3250441966u, 4118548399u, 1200080426u, 2821735955u, 4249261313u, 1770035416u, 2336552879u,
			4294925233u, 2304563134u, 1804603682u, 4254626195u, 2792965006u, 1236535329u, 4129170786u, 3225465664u, 643717713u, 3921069994u,
			3593408605u, 38016083u, 3634488961u, 3889429448u, 568446438u, 3275163606u, 4107603335u, 1163531501u, 2850285829u, 4243563512u,
			1735328473u, 2368359562u, 4294588738u, 2272392833u, 1839030562u, 4259657740u, 2763975236u, 1272893353u, 4139469664u, 3200236656u,
			681279174u, 3936430074u, 3572445317u, 76029189u, 3654602809u, 3873151461u, 530742520u, 3299628645u, 4096336452u, 1126891415u,
			2878612391u, 4237533241u, 1700485571u, 2399980690u, 4293915773u, 2240044497u, 1873313359u, 4264355552u, 2734768916u, 1309151649u,
			4149444226u, 3174756917u, 718787259u, 3951481745u
		};

		private static uint leftRotate(uint x, int c)
		{
			return x << c | x >> 32 - c;
		}
	}
}
